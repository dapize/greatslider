
* Información del plugin:

	- Nombre: Great Slider	 
	- Descripción: Un slider todo terreno
	- Version: Alpha 0.1
	- Autor: Daniel Pisconte Zevallos


* Parametros de configuración:

	{
		type: 'fade', // fade, swipe : determina el tipo de slider

		nav: true, // true, false : oculta o muestra las flechas de navegación
		navSpeed: 500, // en milisegundos

		items: 1, // numero de items a mostrar en pantalla
		slideBy: 1, // numero de items entre cada pase

		touch: true, // true, false: habilita o deshabilita la navegación por touch.

		bullets: true, // true, false : aparece o desaparece los bullets

		autoplay: false, // true, false : activa o desactiva el autoplay
		autoplaySpeed: 5000, // tiempo de espera entre cada paso

		autoHeight: false, // redimenciona automáticamente el alto del slider, dependiendo del contenido del item

		log: false, // true, false: para registrar en consola toda acción o incidente ocurrido.

		dataParam: 'data-gs', // OPCIONAL:  el atributo data que contendrá el objeto con los parametros de configuración, OJO: las propiedades del objeto deben estar entre comillas dobles. No se podrán incluir eventos ni metodos pero si breakpoints. Las configuraciones aquí sobre escribirán las configuraciones pasadas en el objeto inicializador del slider.
		
		startPosition: 0, // la posición del item que estará activo al iniciar el slider.

		fullScreen: false, // false, true : habilita o deshabilita la pantalla completa

		lazyLoad: true, // true, false : habilita la carga por demanda
		lazyClass: 'gs-lazy', // la clase que tendrá el o los items a cargar por demanda
		lazyAttr: 'data-lazy', // el atributo que tendrá el o los items para cargar por demanda
		lazyAttrFs : 'data-lazyfs', // el atributo que contendrá el enlace para el recurso para pantalla completa

		layout: {

			containerItemsTag: 'div', // el tag del contenedor d elos items
			containerItemsClass: 'gs-container-items', // la clase del contenedor de los sliders
			wrapperItems: '.gs-wrapper-items', // envoltorio de la lista de items

			wrapperItemsTag: 'ul', // el tag del wrapper de los items
			wrapperItemsClass: 'gs-wrapper-items', // la clase del wrapper de los items
			transitionClass: 'gs-in-transition', // la clase que se le adiciona al slider cuando se está haciendo un pase de frame
			transitionMode: 'ease', // el tipo de selección que tendrá el slider, tipos: ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n)

			itemClass: '.gs-item-slider', // la clase que tendrá cada item del slider
			itemActiveClass: 'gs-item-active', // la clase que tendrá el item activo
			itemLoadingClass: 'gs-item-loading', // la clase que tendrán los items cuando estén cargando
			itemLoadedClass: 'gs-item-loaded', // la clase que tendrá el item cuando terminó de cargar

			itemTag: 'li', // el tag de los items a construir
			itemClass: 'gs-item-slider', // la clase de los items a construir
			itemWrapperTag: 'div', // el tag del wrapper interno dle item
			itemWrapperClass: 'gs-wrapper-content', // la clase del wrapper interno del item
			itemActiveClass: 'gs-item-active', // la clase cuando un item está activo
			itemLoadingClass: 'gs-item-loading', // la clase cuando el item tiene algún contenido lazy y se le agrega mientras el recurso lazy carga
			itemLoadedClass: 'gs-item-loaded', // la clase cuando terminó de cargar el contenido lazy que tenga el item

			containerNavsTag: 'div', // el tag del container de los botones de navegación (flechas y bullets)
			containerNavsClass: 'gs-container-navs', // la clase del contenedor de navegación

			wrapperArrowsTag: 'div', // el tag del contenedor de las flechas
			wrapperArrowsClass: 'gs-wrapper-arrows', // la clase del contenedor de las flechas
			arrowsTag: 'button', // el tag de una flecha
			arrowPrevClass: 'gs-prev-arrow', // la clase de la flecha 'anterior'
			arrowPrevContent: '', // string, el contenido que tendrá la flecha PREV.
			arrowNextClass: 'gs-next-arrow', // la clase de la flecha 'siguiente'
			arrowNextContent: '', // string, el contenido que tendrá la flecha NEXT.
			arrowDefaultStyles: true, // estilos por defecto que le dá el slider a las flechas

			wrapperBulletsTag: 'div', // tag del wrapper de los bullets
			wrapperBulletsClass: 'gs-wrapper-bullets', // clase del envoltorio de los bullets
			bulletTag: 'button', // tag de un bullet
			bulletClass: 'gs-bullet', // clase de un bullet
			bulletActiveClass: 'gs-bullet-active', // clase de un bullet cuando se encuentra activo
			bulletDefaultStyles: true, // estilos por defecto que le dá el slider a los bullets

			fsButton: '.gs-fs', // elemento que abrirá el fullscreen
			fsButtonTag: 'button', // el tag del boton que abre el Full screen, si es que no existe, lo crea.
			fsInClass: 'gs-infs', // la clase que se le agregará al slider y al boton cuando se ingrese al full screen

			noneClass: 'gs-none', // clase general que desaparece del DOM a varios elementos
			attachedClass: 'gs-attached', // clase general indicativa de anidación de eventos sobre un elemento.
			builtClass: 'gs-builded', // clase que se agrega al slider cuando fué construido la estructura
			resizeClass: 'gs-resize' // clase que se agrega cuando se está redimencionando la ventana.
			resizedClass: 'gs-resized', // clase que se le agrega cuando el redimencionamiento a concluido, ésta clase es temporal, y desaparece en 1 segundo.
		},

		breakPoints: {}
		/* éste objeto es netamente opcional y se usa para determinar una configuración diferente dependiendo el ancho de la pantalla, éste contendrá a su vez más objetos, en donde la propiedad de cada objeto será el ancho de la pantalla que como mínimo debe cumplirse para los nuevos parametros de configuración que se darán.

			* Ejemplo:

				cuando la pantalla tenga...

					- 768 de ancho como mínimo, los items serán 2

					- 1280 las flechas se activarán y mostrarán, y los bullets desaparecerán

					- 1440 los items a mostrar serán de 3 y cada pase será de 3 en 3.



			breakPoints: {

				768: {
					items: 2
				},

				1280: {
					nav: true, 
					bullets: false
				},

				1440: {
					items: 3,
					slideBy: 3
				}

			}
		*/


	}


* Eventos opcionales:

	- onInit: cuando se inicializa la construcción.
		-> no devuelve nada.

	- onInited: cuando yá terminó de inicializarce el sistema.
		-> tampoco devuelve nada.

	- onLoadingItem: cuando carga el item que activo.
		-> elemento e index del item

	- onLoadedItem: cuando terminó de cargar el item activo.
		-> elemento, index, status

	- onStepStart: cuando se realiza un pase de frame(s).
		-> itemActivo, indexItemActivo

	- onStepEnd: cuando se termina de hacer un pase de frame(s).
		-> itemActivo, indexItemActivo

	- onResized: cuando ya se redimencionó la pantalla.
		-> el ancho de la pantalla

	- onLastItem: cuando se llega al último item.
		-> item, index

	- onPlay: cuando se inicializa el autoplay.

	- onStop: cuando se detiene el autoplay.

	- onFullscreenIn: cuando se entra en el modo full screen

	- onFullscreenOut: cuando se sale del modo full screen

	- onDestroyed: cuando se destruye el slider


* Metodos disponibles:

	let slider = $('#example1').greatSlider();

	- Sistema de registro:

		- Inserción:

			slider.log({
				type: 'war', 
				text: 'esta es una precaución de prueba.'
			});

		- Obtención de registro:

			slider.log();
			-> varias impresiones en consola de cada registro guardado.


	- Pase de slider:

		- Next: ir al siguiente frame: slider.goTo('next');

		- Prev: ir al previo frame: slider.goTo('prev');

		- Específico: ir a un específico frame, por ejemplo al quinto: slider.goTo(5)

		- Auto Play:

			Iniciar: slider.autoplay('play');
			Detener: slider.autoplay('stop');

		- Desplasamiento por touch (por defecto viene activado)

			Activar: slider.touch(true);
			Desactivar: slider.touch(false);

	- Full Screen:

		- Entrar: OJO: solo funciona si se es accionado por el usuario, más no directamente.

			slider.fullscreen('in'); 

		- Salir:

			slider.fullscreen('out');

		- Chekear si se está en FS:

			slider.fullscreen('check');
			-> true o false //

	- Información general

		- Saber que item está activo: slider.getActive();
			-> {item, index}

	- Bullets:

		- Activar los bullets: slider.bullets(true), o desactivarlos slider.bullets(false)
		- Refrescar los bullets slider.bullets('refresh'), normalmente esto se usa para recrearlos.

	- Flechas:

		- Activar o desactivar las flechas: slider.navs(true) o slider.navs(false)

	- Items:

		- Cambiar los items a mostrar:

			- Mostrar 1 item a la vez: slider.items(1)
			- Mostrar 3 item a la vez: slider.items(3)
			- Mostrar 4 item a la vez: slider.items(4)

	- Acciones varias:

		- Destruir el slider: slider.destroy();

		


* NOTAS IMPORTANTES:
	
	- el parametro 'autoHeight' solo aplica cuando el parametro de configuración 'items' es igual a 1, cuando no se está en 'Full Screen' y obviamente cuando el 'autoHeight' es igual a 'true', a menos que el tipo de slider sea 'fade', en ese caso el 'autoHeight' se aplicará automáticamente, amenos que explicitamente se determine en 'false'.

	- Cuando se crean multiples sliders con una selección multiple:

			EJM: $('.sliders').greatSlider()
		
			-> para acceder a sus métodos hace falta que primero se guarde en una variable el llamado del slider:

				EJM: var misSliders = $('.sliders').greatSlider()

				para luego acceder a éstos deacuerdo al orden de creación, digamos que se crearón 5 sliders con el inicializador de arriba, para acceder al metodo "goTo('next')" (para ir al siguiente item), se debe hacer así:

				misSliders[4].goTo('next'); (OJO: pongo 4, xq el indice es 0)




/*


	Cosas en las que tengo que trabajar:

	- carga condicionada por parametro de configuración del mini reset interno.
	- agregar la funcionalidad de ejecución del metodo destroyed bajo un breakpoint.
	- agreagar metodo de inicializacion del slider, tmb en breakpoint, como el de arriba.


	Cosas para hacer posiblemente:

		- que el auto play pueda desactivarce por breakpoint
		- agregar preload
		- anidación de navegación por la ruedita del mouse en fullscreen

*/
